LC: Longest ZigZag Path in a Binary Trees

Question: You are given the root of a binary tree.

A ZigZag path for a binary tree is defined as follow:

Choose any node in the binary tree and a direction (right or left).
If the current direction is right, move to the right child of the current node; otherwise, move to the left child.
Change the direction from right to left or from left to right.
Repeat the second and third steps until you can't move in the tree.
Zigzag length is defined as the number of nodes visited - 1. (A single node has a length of 0).

Return the longest ZigZag path contained in that tree.



Solution: we will solve this in postorder. 

Terminologies to be known
                                    Node
				  /      \
		forward slope    /        \  backward slope


Consider this tree
    
                                 a
			       /   \
                             b       c
                           /   \   /   \
                          ^     ^ ^     ^

If we are at the node 'a' and we want zig zag path [leave question]


   

class Solution {
    static class Pair{
        int forwardslop=-1;  //Since we are calculating in terms of edges starting will be -1 otherwise, it will be 0(nodes).
        int backwwardslop=-1;
        int maxLen = -1;
    }
    
    public Pair zigzag_util(TreeNode root){
        if(root==null){
            return new Pair();
        }
        
        Pair lchild = zigzag_util(root.left);
        Pair rchild = zigzag_util(root.right);
        
        Pair myans = new Pair();
        
			        //not including the current node in maxlength	//including the current node in the maxlen
        myans.maxLen = Math.max(Math.max(lchild.maxLen,rchild.maxLen),Math.max(lchild.backwwardslop, rchild.forwardslop)+1);
        
        myans.forwardslop = lchild.backwardslop+1;
        myans.backwwardslop = rchild.forwardslop+1;
        
        return myans;
    }
    public int longestZigZag(TreeNode root) {
        Pair ans = zigzag_util(root);
        
        return ans.maxLen;
    }
}
   
   