Ques: Vertical order of the Binary Tree [Method 2 used in many questions]



Sol: This solution is based on the width of Binary Tree.   

Step1: Calculate the width of the Tree first. 

  	public static void width(TreeNode root, int hl, int[] wid){
		if(root==null){
			return;
		}
		
		ans[0] = Math.min(ans[0],hl);
		ans[1] = Math.max(ans[1],hl);

		width(root.left,hl-1,wid);
		width(root.right,hl+1,wid);
	}

Step2: Now create a class vPair
		
		class vPair{
			TreeNode node =null;
			int hl=0;

			vPair(TreeNode node, int hl){
				this.node=node;
				this.hl=hl;
			}

		}

Step3: Write our Function

	 public static ArrayList<ArrayList<Integer>> verticalOrder(TreeNode root){
		ArrayList<ArrayList<Integer>> ans = new ArrayList<>();

		if(root==null){
			return ans;
		}

		int[] minmax = new int[2];
		width(root,0,minmax);

		int widOfTree = minmax[1]-minmax[0]+1;
		
                for(int i=0;i<widOfTree;i++) ans.add(new ArrayList<>());

		Queue<vPair> q = new LinkedList<>();
		q.add(new vPair(root,Math.abs(minmax[0]))); // We are putting abs(minmax[0]) because in this implnt, the lvl cannot be negative so 
								we are giving abs value of min[0] so that  the left most node can start from value 0
							      0  5                 2 5
								/                   /
							    -1 7                 1 7
							      /                   /  
							  -2 4                 0 4       See no values in negative if we take abs(minmax[0])

		 
		while(q.isEmpty()==false){
			for(int i=0;i<q.size();i++){
           			 Pair rem = q.remove();
                                 TreeNode node = rem.node;
				 int hl = rem.hl;

           			 ans.get(hl).add(node.val);
            
            			 if(node.right!=null){
               				 q.add(new Pair(node.right,hl+1));
           			  }    
                
            			 if(node.left!=null){
              				 q.add(new Pair(node.left,hl-1));
            			  }
            
            
                        }
                   }
        
                 return ans;

		}
