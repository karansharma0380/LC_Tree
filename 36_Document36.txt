Ques: Given a Binary Tree, The task is to print the top view from left to right.

		       Eye

Input:                 20
                    /     \
                  8         22
               /      \       \
              5        3       25
                     /   \      
                   10     14

	      

Output: 5, 8, 20, 22, 25. 

Solution:     This is just a variation of Vertical order of binary tree. 
 	If we consider the vertical order of the tree
	
			0 -> 5
			1 -> 8,10
   			2 -> 20,3
			3 -> 22,14
			4 -> 25
	If we see the first element of our lists we get 5,8,20,22,25. So, our idea is to only print first 
	element of every list.
	So, instead of making list<list<Integer>> we will make list<Integer> we will not add elements, we 
	will just update the element. 
	
	so we will get      0 -> 5
			    1 -> 8
			    2 -> 20
			    3 -> 22
			    4 -> 25

	class Solution{

		public void width(TreeNode node, int hl, int ans){
			if(node==null){
				return;
			}
			ans[0] = Math.min(hl,ans[0]);
			ans[1] = Math.max(hl,ans[1]);

			width(node.left,hl-1,ans);
			width(node.right,hl+1,ans);
		}
		
		public class Pair{
			TreeNode node;
			int hl;


			public Pair(TreeNode node, int hl){
				this.node=node;
				this.hl=hl;
			}
		}
		
		public List<Integer> btmView(TreeNode root){
			List<Integer> ans =new ArrayList<>();

			if(root==null){
				return ans;
			}

			int[] minmax = new int[2];
			width(root,0,minmax);
			int len = minmax[1]-minmax[0]+1;

			for(int i=0;i<len;i++){
				ans.add(null);  // This was 0 for the bottom view coz we are only doing setting.
						// Here we are going null coz we only want first value. 	
			}

			Queue<Pair> q = new LinkedList<>();
			q.add(new Pair(root,Math.abs(minmax[0])));


			while(q.isEmpty()==false){
				
				for(int i=0;i<q.size();i++){
					Pair rem = q.remove();
	
					TreeNode node = rem.node;
					int hl = rem.hl;

					if(ans.get(hl)==null){   //We will only add for the first time.
						ans.set(hl,node.val);
					}

					if(node.right!=null){
						q.add(new Pair(node.right,hl+1));
					}
					if(node.left!=null){
						q.add(new Pair(node.left,hl-1));
					}	
					
				}
			}

			return ans;

		}




	}
			  
